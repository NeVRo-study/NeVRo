%% NVR_EventsAro
%This script adds the arousal events to the NeVRo EEG data. 

function NVR_05_ICA(cropstyle, mov_cond) 

%% 1.Set Variables
%clc
%clear all

%1.1 Set different paths:
path_data = '../../Data/';
path_dataeeg =  [path_data 'EEG/'];
path_in_eeg = [path_dataeeg 'eventsAro/' mov_cond '/' cropstyle '/']; 

% output paths:
path_out_eeg = [path_dataeeg 'ICA2/' mov_cond '/' cropstyle '/'];
if ~exist(path_out_eeg, 'dir'); mkdir(path_out_eeg); end
path_reports = [path_out_eeg 'reports/'];
if ~exist(path_reports, 'dir'); mkdir(path_reports); end

%1.2 Get data files
files_eeg = dir([path_in_eeg '*.set']);
files_eeg = {files_eeg.name};


% Create report file:
fid = fopen([path_reports 'rejected_epos.csv'], 'a') ;
fprintf(fid, 'ID,n_epos_rejected,epos_rejected\n') ;
fclose(fid);

% prepare some parameters for ICA preparation:
% Which channels shall be used to determine noisy epochs (which will be 
% discarded for ICA decomp)?
% We exclude channels that show coactivation with eye-movements as
% rejection via extreme values is used and eye-movements cause big
% deflections. However, ICA will do a way better job to discard this noisy,
% so we actually want to keep epochs with "only" eye-activity. We want to
% discard channels with strong motor noise or electrode displacement ("huge
% bursts").
ICA_prep_ignore_chans = [];
ICA_prep_ignore = {'HEOG', 'VEOG', 'Fp1', 'Fp2', 'F8', 'F7'};
for igc = 1:numel(ICA_prep_ignore)
    idx = find(strcmp({EEG.chanlocs.labels}, ICA_prep_ignore{igc}));
    if ~isempty(idx)
        ICA_prep_ignore_chans(end+1) = idx;
    end
end

ICA_prep_chans = setdiff([1:32], ICA_prep_ignore_chans);

    

discarded = {};
discarded_mat = zeros(length(files_eeg),20);
counter = 0;


for isub = 1:length(files_eeg)
    %1.3 Launch EEGLAB:
    [ALLEEG EEG CURRENTSET ALLCOM] = eeglab;
    
    % 1.4 Get subj name for getting the right event file later:
    thissubject = files_eeg{isub};
    thissubject = strsplit(thissubject, mov_cond);
    thissubject = thissubject{1};    
    
    %1.5 Set filename:
    filename = strcat(thissubject, mov_cond, '_PREP_', cropstyle, '_eventsaro'); 
    filename = char(filename);
    
    %% 2.Import EEG data
    [EEG, com] = pop_loadset([path_in_eeg, filename '.set']);
    EEG = eegh(com,EEG);
    full_eeg_idx = CURRENTSET;
    eeg_rank = rank(EEG.data);
    
    
    
    EEG = NVR_S01_prep4ICA
    
    counter = counter+1;
    discarded_mat(counter,1:length(disc_epo)) = disc_epo;
    discarded{counter} = disc_epo;
    
    %% 5. Create and Update "Rejected epochs" list
    fid = fopen([path_reports 'rejected_epos.csv'], 'a') ;
    sub_name = strsplit(filename, '_');
    sub_name = [sub_name{1} '_' sub_name{2}];
    epos = strjoin(arrayfun(@(x) num2str(x),disc_epo,'UniformOutput',false),'-');
    c = {sub_name, ...
        sprintf('%i',length(disc_epo)), ...
        sprintf('%s', epos)};
    fprintf(fid, '%s,%s,%s\n',c{1,:}) ;
    fclose(fid);
    
       

%     % run ICA:
%     EEG = pop_runica(EEG, 'extended',1,'interupt','on','pca',eeg_rank);
%     
%     EEG = eegh(com,EEG);
%     EEG.setname=filename;
%     [ALLEEG EEG CURRENTSET] = eeg_store(ALLEEG, EEG);
%     EEG = pop_saveset(EEG, [filename  '_ICA.set'] , path_out_eeg);
%     [ALLEEG EEG CURRENTSET] = eeg_store(ALLEEG, EEG);
        
end