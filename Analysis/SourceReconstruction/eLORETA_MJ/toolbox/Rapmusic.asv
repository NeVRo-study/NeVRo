function [s_all,vmax_all,imax_all,dips_mom_all,dips_loc_all]=RAPMusic(patt,V,ns,grid,para);
% calculates n dipoles with RAPMusic 
% 
% usage: [s,vmax,imax,dip_mom,dip_loc]=RAPMusic(patt,V,ns,grid,para);
%
% input: 
%        patt  nxm matrix for n channels; 
%              each column in patt represents a spatial pattern;
%              (only the span(patt) matters; mixing of the patterns has no effect)
%        V     nxmx3 matrix for m grid_points; V(:,i,j) is the potential
%              of a unit dipole at point i in direction j;
%        ns  number of dipoles 
%        grid  (optional) mx3 matrix denoting locations of grid points
%               if you omit that the output dip_loc will be empty
%        para   optional structure to try modifications for test purposes 
%               (not relevant here)
%
%  output:
%          s mxns matrix; s(i,j) indicates fit-quality (from 0 (worst) to 1 (best)) at grid-point
%                        i of j.th distribution
%          imax  ns numbers imax(i) denotes grid-index of best dipole of i.th  distribution
%          vmax  nsx2 matrix; vmax(:,i) is the field of the best dipole of the i.th distribution 
%          dip_mom  nsx3 matrix dip_mom(i,:) is the moment of the  best
%                              dipole of the i.th distribution 
%          dip_loc nsx3 matrix dip_loc(i,:) is the location of the  best
%                              dipole of the i.th distribution (can only be
%                              calculated if a grid is given)
%
%

nite=100;
if nargin<4
    para=[];
end


data=orth(patt);
[nchan,ng,ndum]=size(V);
spacecorr=zeros(ng,1);
s_all=zeros(ng,ns);
vmax_all=zeros(nchan,ns);
imax_all=zeros(ns,1);
 
if ranstart==0;
     [spacecorr,vmax_all(:,1),imax_all(1)]=one_ite(V,data);
    s_all(:,1)=spacecorr;
    proj_pat=vmax_all(:,1);
    [s_all(:,2),vmax_all(:,2),imax_all(2)]=one_ite(V,data,proj_pat);
 elseif ranstart==1
     [nchan ng ndipdir]=size(V);
    for i=1:ns
      iran=ceil((ng-1)*rand(1,1));
      imax_all(i)=iran;
      mom=randn(ndipdir,1);
      v0=squeeze(V(:,iran,:))*mom;
      vmax_all(:,i)=v0/norm(v0);
    end
    for k=1:100     
      [vmax_new,reldiff]=vmax2vmax_new(V(:,imax_all,:),vmax_all,patt);
      vmax_all=vmax_new;
    end
    %disp([k,100*reldiff]);
 elseif ranstart==2
    v0=para.v0; 
    [nchan,nsstart]=size(v0);
    if nsstart==1
      v0=v0/norm(v0);
      vmax_all(:,1)=v0;
      proj_pat=vmax_all(:,1);
      [s_all(:,2),vmax_all(:,2),imax_all(2)]=one_ite(V,data,proj_pat);
    elseif nsstart==2
       v0=[v0(:,1)/norm(v0(:,1)),v0(:,2)/norm(v0(:,2))];
       vmax_all=v0;
    end
end

    

 
 
 
 
 cont=0;i=0;
 while cont==0
     i=i+1;
     s_old=s_all;
       proj_pat=vmax_all(:,2);
      [s_all(:,1),vmax_new(:,1),imax_all(1)]=one_ite(V,data,proj_pat);

 
      proj_pat=vmax_new(:,1);
     [s_all(:,2),vmax_new(:,2),imax_all(2)]=one_ite(V,data,proj_pat);
     
     vmax_all=vmax_new;
     reldiff=1;
      for k=1:100     
          lambda=0;
       [vmax_new,reldiff]=vmax2vmax_new(V(:,imax_all,:),vmax_all,patt);
       %disp([k,100*reldiff]);
       vmax_all=vmax_new;
     end
     %rel=norm(1./(1-s_old)-1./(1-s_all),'fro')/norm(1./(1-s_all),'fro');
     rel=norm(s_old-s_all,'fro')/norm(s_old+sqrt(eps));
     %rel=norm(1./(1-s_old)-1./(1-s_all),'fro')/norm(1./(1-s_all),'fro');
     disp([i,rel*100,reldiff*100]);
     %disp(imax_all');
     if i>nite-1 | rel<1e-4 
         cont=1;
     end
   
 end
 
  
 
 dips_mom_all=vmax2dipmom(V,imax_all,vmax_all);
 if nargin>2
   dips_loc_all=grid(imax_all,:);
 else
   dips_loc_all=[];
 end
 
return;

function [s,vmax,imax]=one_ite(V,data,proj_pat)
  if nargin==2;
      [nchan,ng,ndum]=size(V);
      s=zeros(ng,1);
      for i=1:ng;
         Vortholoc=orth(squeeze(V(:,i,:)));
         s(i)=calc_spacecorr(Vortholoc,data);
      end
     [smax,imax]=max(s(:));
     Vortholoc=orth(squeeze(V(:,imax,:)));
     vmax=calc_bestdir(Vortholoc,data);
  else
      [nchan,ng,ndum]=size(V);
      s=zeros(ng,1);
      proj_pat=orth(proj_pat);
      data_proj=orth(data-proj_pat*(proj_pat'*data));
      for i=1:ng;
         Vortholoc=orth(squeeze(V(:,i,:)));  
         s(i)=calc_spacecorr(Vortholoc,data_proj,proj_pat);
      end
      [smax,imax]=max(s);
      Vortholoc=orth(squeeze(V(:,imax,:)));
      vmax=calc_bestdir(Vortholoc,data_proj,proj_pat);
  end
return
  

function s=calc_spacecorr(Vloc,data_pats,proj_pats)
 if nargin==2
     A=data_pats'*Vloc;
     [u s v]=svd(A);
     s=s(1,1);
  else
     V_proj=orth(Vloc-proj_pats*(proj_pats'*Vloc));
     data_proj=orth(data_pats-proj_pats*(proj_pats'*data_pats));
     A=data_proj'*V_proj;
     [u s v]=svd(A);
     s=s(1,1);
  end
return;

function [vmax,s]=calc_bestdir(Vloc,data_pats,proj_pats)
 if nargin==2
     A=data_pats'*Vloc;
     [u s v]=svd(A);
     vmax=Vloc*v(:,1);
     vmax=vmax/norm(vmax); 
     s=s(1,1);
 else
     [n m]=size(Vloc);
     V_proj=orth(Vloc-proj_pats*(proj_pats'*Vloc));
     A=data_pats'*V_proj;
     [u s v]=svd(A);
     BB=(Vloc'*proj_pats);
     Q=inv(eye(m)-BB*BB'+sqrt(eps));
     vmax=Vloc*(Q*Vloc'*(V_proj*v(:,1)));
     vmax=vmax/norm(vmax); 
     s=s(1,1);
  end
return;

function u=myortho(V);
        [n m]=size(V);
        [u,s,v]=svd(V);
        u=u(:,1:m);
return
    

function   dips_mom_all=vmax2dipmom(V,imax_all,vmax_all);
  ns=length(imax_all);
  dips_mom_all=zeros(ns,3);
   for i=1:ns
       Vloc=squeeze(V(:,imax_all(i),:));
       v=vmax_all(:,i);
       dip=inv(Vloc'*Vloc)*Vloc'*v;
       dips_mom_all(i,:)=dip'/norm(dip);
   end
   
return;

function [vmax_new,reldiff]=vmax2vmax_new(Vs,vmax,data);

[nchan,ns,ndipdir]=size(Vs);
   data_pats=orth(data);
  vmax_new=vmax;
  for i=1:ns
      vmax_loc=vmax(:,[1:i-1,i+1:end]);
      proj_pats=orth(vmax_loc);
      Vloc=orth(squeeze(Vs(:,i,:)));
      V_proj=orth(Vloc-proj_pats*(proj_pats'*Vloc));
      data_pats=orth(data-proj_pats*(proj_pats'*data));
      A=data_pats'*V_proj;
      [u s v]=svd(A);
      BB=(Vloc'*proj_pats);
      Q=inv(eye(ndipdir)-BB*BB'+sqrt(eps));
      vmax_x=Vloc*(Q*Vloc'*(V_proj*v(:,1)));
      vmax_x=vmax_x/norm(vmax_x); 
      vmax_new(:,i)=vmax_x;
  end
  
  reldiff=norm(vmax-vmax_new,'fro')/norm(vmax,'fro');
  
  save vmax vmax vmax_new
  
  return;
      
 function v0=find0(V,data,nrun);
      [nchan,ng,ndipdir]=size(V);
      s=zeros(nrun,1);
      iran=ceil((ng-1)*rand(nrun,2));
      data_orth=orth(data);
      for i=1:nrun;
        Vloc=[squeeze(V(:,iran(i,1),:)),squeeze(V(:,iran(i,2),:))];
        Vloc_orth=orth(Vloc);
        A=Vloc_orth'*data_orth;
        [u,ss,v]=svd(A);
        s(i)=ss(1,1);
      end
      [smax,imax]=max(s);
       Vloc=[squeeze(V(:,iran(imax,1),:)),squeeze(V(:,iran(imax,2),:))];
       Vloc_orth=orth(Vloc);
       A=data_orth'*Vloc_orth;
       [u, s ,v]=svd(A);
       vmax=Vloc_orth*v(:,1);
       dip=inv(Vloc'*Vloc)*(Vloc'*vmax);
       v1=Vloc*[dip(1:3);zeros(3,1)];
       v2=Vloc*[zeros(3,1);dip(4:6)];
       if norm(v1)>norm(v2)
         v0=[v1,v2];
       else
         v0=[v2,v1];
       end
        
 return
 
        
          
        

